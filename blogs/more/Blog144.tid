{
    "text": "<p>I used to extensively use <a title=\"jamine\" href=\"http://pivotal.github.com/jasmine\" target=\"_blank\">Jamine</a> and <a title=\"jasmine-node\" href=\"https://github.com/mhevery/jasmine-node\" target=\"_blank\">Jasmine-Node</a> for my JavaScript testing. While jasmine is great I&#8217;ve recently moved over to <a title=\"Mocha\" href=\"http://visionmedia.github.com/mocha\" target=\"_blank\">Mocha</a> for several reasons but primarily because it supports coverage reporting.</p>\n<p>Here are some basic steps to get going. There are several key components required, click on the different links and follow the installation instructions:</p>\n<ul>\n<li><a title=\"node.js\" href=\"http://nodejs.org\" target=\"_blank\">node.js</a> is the core JavaScript platform</li>\n<li><a title=\"Mocha\" href=\"http://visionmedia.github.com/mocha\" target=\"_blank\">Mocha</a> is the test framework</li>\n<li><a title=\"node-jscoverage\" href=\"https://github.com/visionmedia/node-jscoverage\" target=\"_blank\">node-jscoverage</a> gives coverage support. You can also read TJ Holowaychuk&#8217;s article for more details <a title=\"Mocha test coverage\" href=\"http://tjholowaychuk.com/post/18175682663/mocha-test-coverage\" target=\"_blank\">Mocha test coverage</a></li>\n<li><a title=\"Jenkins HTML Publisher Plugin\" href=\"https://wiki.jenkins-ci.org/display/JENKINS/HTML+Publisher+Plugin\" target=\"_blank\">Jenkins HTML Publisher Plugin</a> will let you view the coverage report in <a title=\"Jenkins\" href=\"http://jenkins-ci.org\" target=\"_blank\">Jenkins</a></li>\n</ul>\n<h3>Setting up coverage</h3>\n<p>Tests must be configured to run with the instrumented code so that coverage works. The coverage command creates the instrumented version of the code in the <code>lib-cov</code> directory:</p>\n<p><code>jscoverage lib lib-cov</code></p>\n<p>The tests need to use these files instead. When using <a title=\"RequireJS\" href=\"http://requirejs.org\" target=\"_blank\">RequireJS</a> (or <a title=\"node.js\" href=\"http://nodejs.org\" target=\"_blank\">node.js</a>) this can be done by modifying <code>index.js</code> and using an environment variable. Calling the environment variable <b>APP_COVERAGE</b> (which you would have to set before calling the tests) it would look something like this:</p>\n<p><code>module.exports = process.env.APP_COVERAGE ? require('./lib-cov/app') : require('./lib/app');</code></p>\n<p>If there are multiple modules in a directory you can do something like this:<br />\n<code><br />\nvar module1 = process.env.APP_COVERAGE ? require('./lib-cov/module1'): require('./lib/module1');<br />\nvar module2 = process.env.APP_COVERAGE ? require('./lib-cov/module2'): require('./lib/module2');</code></p>\n<p>module.exports = {<br />\nmodule1: module1,<br />\nmodule2: module2<br />\n};</p>\n<p>Then in the tests you can just <code>require</code> the modules as appropriate:</p>\n<p><code>var app = require('../../index.js');</code></p>\n<p>or</p>\n<p><code>var module1 = require('../../index.js').module1;</code></p>\n<h3>Using Makefile</h3>\n<p>I have a standard Makefile that I use for running builds</p>\n<p><script src=\"https://gist.github.com/BoyCook/4606004.js\"></script></p>\n<p>Here&#8217;s a breakdown of the tasks/rules:</p>\n<ul>\n<li><code>make test</code> runs the tests and displays the results in the terminal. This is perfect for developer use</li>\n<li><code>make test-ci</code> runs the tests and creates an xUnit format XML report</li>\n<li><code>make test-cov</code> runs the tests and creates coverage report HTML file</li>\n<li><code>make test-all</code> runs the <code>test-ci</code> and <code>test-cov</code> tasks creates both the xUnit format XML report and the HTML coverage report. This is perfect for CI use</li>\n</ul>\n<h3>Showing coverage in Jenkins</h3>\n<p>If you have installed the <a title=\"Jenkins HTML Publisher Plugin\" href=\"https://wiki.jenkins-ci.org/display/JENKINS/HTML+Publisher+Plugin\" target=\"_blank\">Jenkins HTML Publisher Plugin</a> and are using the <code>make test-all</code> command, you can then configure Jenkins to use the generated HTML coverage report by adding the &#8220;Publish HTML reports&#8221; post build action and configuring it to use the coverage.html file.</p>\n<h3>Live example</h3>\n<p>You can see an example of a fully working project in my HttpFileServerJS project (please note that this is subject to outages):</p>\n<p><a title=\"HttpFileServerJS GitHub project\" href=\"https://github.com/BoyCook/HttpFileServerJS\" target=\"_blank\">HttpFileServerJS GitHub project</a></p>\n<p><a title=\"HttpFileServerJS Jenkins job\" href=\"http://craigcook.co.uk/build/job/HTTP%20File%20Server\" target=\"_blank\">HttpFileServerJS Jenkins job</a></p>\n",
    "modifier": "DataFeed",
    "tags": ["blog"],
    "fields": {
		"date": "2013-03-29T17:05:11+00:00",
		"modified": "2013-03-29T19:43:01+00:00",
		"title": "Automated JavaScript testing with Mocha and js-coverage for NodeJS",
		"URL": "http://boycook.wordpress.com/2013/03/29/automated-javascript-testing-with-mocha-and-js-coverage-for-nodejs/",
		"short_URL": "http://wp.me/p7oJB-2k",
		"excerpt": "<p>I used to extensively use Jamine and Jasmine-Node for my JavaScript testing. While jasmine is great I&#8217;ve recently moved over to Mocha for several reasons but primarily because it supports coverage reporting. Here are some basic steps to get going. &hellip; <a href=\"http://boycook.wordpress.com/2013/03/29/automated-javascript-testing-with-mocha-and-js-coverage-for-nodejs/\">Continue reading <span class=\"meta-nav\">&rarr;</span></a></p>\n"
    }
}
